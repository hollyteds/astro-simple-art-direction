---
import '../type.d.ts';
import { getImageAsset } from '../renderers/getImageAsset.ts';
import { generateSrcset } from '../renderers/generateSrcset.ts';

interface Props {
  style? : string;
  src: src;
  artDirectives? : artDirective[];
  alt? : string;
  loading?: loading;
  class? : string;
  decoding? : decoding;
  formats? : format[];
}

const { 
  style,
  src,
  artDirectives,
  alt = '',
  loading = 'lazy',
  class: className,
  decoding = 'auto',
  formats,
  ...props
} = Astro.props;


// Define the output image format from arguments or environment variables. Defaults to avif and webp.
const envGenarateFormat: format[] = formats ?? await import.meta.env.DEFAULT_GENERATE_FORMAT?.split(' ') ?? ['avif', 'webp'];

const image: assets = await getImageAsset(src, envGenarateFormat);
if(!image) return;

// Fetch priority for the image
const fetchpriority : fetchpriority = (loading === 'eager') ? 'high' : null;

// Fetch images for different media queries
let mediaImages :assets[] = [];
if(artDirectives) {
  for( const src of artDirectives ) {
    const asset = await getImageAsset( src, envGenarateFormat);
    mediaImages.push({ ...asset, attributes: { ...asset.attributes, media: src.media } });
  }
}

---
<picture>
  {mediaImages && mediaImages.length > 0 
    && mediaImages.map((mediaImage: assets) => (
    <>
      { mediaImage.defaultFormat !== 'svg'
        && envGenarateFormat.map((format: format) => 
        (mediaImage.defaultFormat !== format) && (
        <source
          {...mediaImage.attributes}
          srcset={generateSrcset(mediaImage[format])}
          type={"image/" + format}
        />
        ))
      }
      <source
        {...mediaImage.attributes}
        srcset={
          mediaImage.defaultFormat === 'svg'
          ? mediaImage.svg[1].src
          : generateSrcset(mediaImage[mediaImage.defaultFormat])
        }
      />
    </>
  ))}
  { image.defaultFormat !== 'svg'
    && envGenarateFormat.map((format: format) => (
      (image.defaultFormat !== format) && (
        <source
          {...{...image.attributes, sizes: undefined}}
          srcset={generateSrcset(image[format])}
          type={"image/" + format}
        />
      )
  ))
  }
  <img
    {...{
      ...image.attributes,
        sizes: (
        image.defaultFormat !== 'svg' 
        ? image.attributes.sizes 
        : undefined
      )
    }}
    src={image[image.defaultFormat][1].src}
    srcset={
      image.defaultFormat !== 'svg' 
      ? generateSrcset(image[image.defaultFormat]) 
      : undefined
    }
    loading={loading}
    decoding={decoding}
    fetchpriority={fetchpriority}
    alt={alt}
    class={className}
    style={style}
    {...props}
  />
</picture>