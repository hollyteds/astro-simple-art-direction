---
import '../type.d.ts';
import type { HTMLAttributes } from 'astro/types';
import Picture from '../components/Picture.astro';
import { Image, imageConfig } from 'astro:assets';

// @ts-expect-error
interface Props extends HTMLAttributes<'HTMLDivElement'>{
  TagName?: tagName;
  size? : {
    width: sizeLength;
    height: sizeLength;
  };
  class? : string;
  objectFit? : objectFit;
  position? : objectPosition;
  /** @deprecated The "src" property was deprecated in version 1.0.4. Please use the 'image' object instead.*/
  src?: src;
  /** @deprecated The "artDirectives" property was deprecated in version 1.0.4. Please use the 'image' object instead.*/
  artDirectives? : artDirective[];
  /** @deprecated The "alt" property was deprecated in version 1.0.4. Please use the 'image' object instead.*/
  alt? : string;
  /** @deprecated The "loading" property was deprecated in version 1.0.4. Please use the 'image' object instead.*/
  loading?: loading;
  /** @deprecated The "formats" property was deprecated in version 1.0.4. Please use the 'image' object instead.*/
  formats? : format[];
  /** @deprecated The "style" property was deprecated in version 1.0.4. Please use the 'image' object instead.*/
  style? : string;
  /** @deprecated The "decoding" property was deprecated in version 1.0.4. Please use the 'image' object instead.*/
  decoding? : decoding;
  images: {
    style? : string;
    src: src;
    artDirectives? : artDirective[];
    alt? : string;
    loading?: loading;
    decoding? : decoding;
    formats? : format[];
  }
}

declare const userInfo: Props;

const {
  TagName = "div",
  size = { 
    width: '100%',
    height: '100%'
  },
  class: className,
  objectFit = 'cover',
  position = "center",
  images,
  src,
  artDirectives,
  alt,
  loading,
  formats,
  style,
  decoding,
  ...parentProps
} = Astro.props;

const { width, height } = size;
const imageProps = images ? images : { src, artDirectives, alt, loading, formats, style, decoding  }

if(!imageProps.src) throw new Error(`The "src" property of the object "image" is undefined.`);
if(src) console.log('The "src" property was deprecated in version 1.0.4. This property must now be defined as a property of the "images" object.');

// Avoid defining extra CSS variables in internal elements.
const Inner: tagName = "div";

---
<TagName {...parentProps} class:list={ [ className, 'bgp']}>
  <figure aria-hidden="true">
    <Picture {...imageProps}/>
  </figure>
  <Inner>
    <slot />
  </Inner>
</TagName>
<style define:vars={{
  imageWidth: width,
  imageHeight: height,
  attachment: objectFit,
  position: position
}}>
  .bgp {
    position: relative;
  }
  .bgp :global(div) {
    position: relative;
    z-index: 1;
  }
  figure {
    position: absolute;
    margin: 0;
    top:0;
    left:0;
    z-index: 0;
    width:100%;
    height:100%;
    pointer-events: none;
  }
  figure :global(img) {
    display: flex;
    width: var(--imageWidth);
    height: var(--imageHeight);
    object-fit: var(--attachment);
    object-position: var(--position);
    justify-content: center;
    align-items: center;
  }
</style>